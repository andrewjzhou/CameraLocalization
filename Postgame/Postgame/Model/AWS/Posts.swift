//
//  Posts.swift
//  MySampleApp
//
//
// Copyright 2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.21
//


import AWSDynamoDB
import RxSwift


@objcMembers
class Posts: AWSDynamoDBObjectModel, AWSDynamoDBModeling {
    
    var _key: String?
    var _location: String?
    var _username: String?
    var _view: NSNumber?
    
    class func dynamoDBTableName() -> String {
        
        return "postgame-mobilehub-1951513639-Posts"
    }
    
    class func hashKeyAttribute() -> String {
        
        return "_key"
    }
    
    override class func jsonKeyPathsByPropertyKey() -> [AnyHashable: Any] {
        return [
            "_key" : "key",
            "_location" : "location",
            "_username" : "username",
            "_view" : "view",
        ]
    }
    
    class func query(_ locationString: String) -> Observable<[String]> {
        let keyPublisher = PublishSubject<[String]>()
        let dynamoDbObjectMapper = AWSDynamoDBObjectMapper.default()

        // 1) Configure the query
        let queryExpression = AWSDynamoDBQueryExpression()
        queryExpression.indexName = "location"
        queryExpression.keyConditionExpression = "#_location = :_location"

        queryExpression.expressionAttributeNames = [
            "#_location": "location",
        ]
        queryExpression.expressionAttributeValues = [
            ":_location": locationString,
        ]

        // 2) Make the query
        dynamoDbObjectMapper.query(Posts.self, expression: queryExpression) { (output: AWSDynamoDBPaginatedOutput?, error: Error?) in
            if error != nil {
                print("The request failed. Error: \(String(describing: error))")
                keyPublisher.onCompleted()
            }
            
            if output != nil {
                var keySet = [String]()
                for item in output!.items {
                    let post = item as? Posts
                    if let key = post?._key {
                        keySet.append(key)
                    }
                }
                keyPublisher.onNext(keySet)
                keyPublisher.onCompleted()
            } else {
                keyPublisher.onCompleted()
            }
        }
        return keyPublisher.asObservable()
    }
}
